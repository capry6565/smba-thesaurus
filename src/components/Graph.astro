---
const { nodes = [], edges = [], options = {} } = Astro.props;

const defaultOptions = {
  nodes: {
    shape: 'box',
    font: { size: 14, face: 'arial', color: '#333' },
    borderWidth: 2,
    margin: 10,
    color: {
      border: '#2B7CE9',
      background: '#D2E5FF',
      highlight: { border: '#FFA500', background: '#FFE5B4' },
      hover: { border: '#FFA500', background: '#FFF4E0' }
    }
  },
  edges: {
    arrows: 'to',
    color: { color: '#848484', hover: '#2B7CE9', highlight: '#2B7CE9' },
    smooth: {
      enabled: true,
      type: 'dynamic',
      roundness: 0.5
    },
    width: 1,
    font: {
      size: 11,
      align: 'top',
      color: '#666',
      strokeWidth: 0,
      background: 'none'
    },
    chosen: {
      edge: function(values, id, selected, hovering) {
        if (hovering) {
          values.width = 2;
          values.color = '#2B7CE9';
        }
      },
      label: function(values, id, selected, hovering) {
        if (hovering) {
          values.size = 13;
          values.color = '#1a5fc7';
        }
      }
    }
  },
  layout: {
    improvedLayout: true,
    randomSeed: 2
  },
  physics: {
    enabled: true,
    solver: 'forceAtlas2Based',
    forceAtlas2Based: {
      gravitationalConstant: -80,
      centralGravity: 0.005,
      springLength: 250,
      springConstant: 0.02,
      avoidOverlap: 1
    },
    stabilization: {
      enabled: true,
      iterations: 400,
      updateInterval: 25,
      fit: true
    }
  },
  interaction: {
    dragNodes: true,
    dragView: true,
    zoomView: true,
    hover: true,
    navigationButtons: false,
    keyboard: true
  }
};

const finalOptions = { ...defaultOptions, ...options };
const graphData = JSON.stringify({ nodes, edges, options: finalOptions });
---

<div class="graph-wrapper">
  <div id="graph-container"></div>
  
  <div class="graph-controls">
    <button id="freezeBtn" class="control-btn" title="Freeze/unfreeze physics">
      ‚ùÑÔ∏è
    </button>
    <button id="fitBtn" class="control-btn" title="Fit to Screen">
      ‚ä°
    </button>
  </div>

  <div id="nodePopup" class="node-popup">
    <div class="popup-content">
      <button class="popup-close">√ó</button>
      <h3 id="popupTitle"></h3>
      <div id="popupDefinition"></div>
      <div class="popup-actions">
        <button id="popupOpenBtn" class="popup-btn primary">
          üìÑ Open Page
        </button>
      </div>
    </div>
  </div>
</div>

<script id="graph-data" type="application/json" set:html={graphData}></script>

<script type="module">
  import { Network, DataSet } from 'https://unpkg.com/vis-network@9.1.9/standalone/esm/vis-network.min.js';

  const container = document.getElementById('graph-container');
  const graphDataElement = document.getElementById('graph-data');
  const popup = document.getElementById('nodePopup');
  const popupTitle = document.getElementById('popupTitle');
  const popupDefinition = document.getElementById('popupDefinition');
  const popupOpenBtn = document.getElementById('popupOpenBtn');
  const popupClose = document.querySelector('.popup-close');
  
  if (!container || !graphDataElement) {
    console.error('Graph elements not found');
  } else {
    try {
      const { nodes, edges, options } = JSON.parse(graphDataElement.textContent);
      const data = {
        nodes: new DataSet(nodes),
        edges: new DataSet(edges)
      };

      const network = new Network(container, data, options);
      let isPhysicsEnabled = true;
      let currentNodeId = null;

      network.on('click', (params) => {
        if (params.edges.length > 0 && params.nodes.length === 0) {
          const edgeId = params.edges[0];
          const edgeData = data.edges.get(edgeId);
          if (edgeData && edgeData.title) {
            window.open(edgeData.title, '_blank');
          }
          return;
        }
        
        if (params.nodes.length > 0) {
          const nodeId = params.nodes[0];
          currentNodeId = nodeId;
          const nodeData = data.nodes.get(nodeId);
          popupTitle.textContent = nodeData.label || nodeId;
          popupDefinition.innerHTML = nodeData.title || '<i>No definition available. Click "Open Page" for details.</i>';
          popup.classList.add('active');
        }
      });

      popupClose.addEventListener('click', () => popup.classList.remove('active'));
      popup.addEventListener('click', (e) => { if (e.target === popup) popup.classList.remove('active'); });
      popupOpenBtn.addEventListener('click', () => {
        if (currentNodeId) {
          const termId = currentNodeId.replace(/^:/, '').replace(/^.*[:#/]/, '');
          window.open(`/terms/${termId}`, '_blank');
          popup.classList.remove('active');
        }
      });

      document.getElementById('freezeBtn').addEventListener('click', () => {
        isPhysicsEnabled = !isPhysicsEnabled;
        network.setOptions({ physics: { enabled: isPhysicsEnabled } });
        
        const btn = document.getElementById('freezeBtn');
        btn.textContent = isPhysicsEnabled ? '‚ùÑÔ∏è' : '‚ñ∂Ô∏è';
        btn.classList.toggle('active', !isPhysicsEnabled);
      });

      document.getElementById('fitBtn').addEventListener('click', () => {
        network.fit({ animation: { duration: 500, easingFunction: 'easeInOutQuad' } });
      });

      network.once('stabilizationIterationsDone', () => {
        network.fit({ animation: { duration: 400 } });
      });

      console.log('‚úÖ Graph initialized with force-directed layout');
    } catch (error) {
      console.error('Failed to initialize graph:', error);
      container.innerHTML = `<div style="padding: 2rem; color: red;">
        Graph initialization failed: ${error.message}
      </div>`;
    }
  }
</script>

<style>
  .graph-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    padding-bottom: 0.6rem;
    overflow: hidden;

  }

  #graph-container {
    width: 100%;
    height: 100%;
    border: 1px solid #ddd;
    border-radius: 8px;
    background: #fafafa;
  }

  .graph-controls {
    position: absolute;
    top: 8px;
    right: 8px;
    display: flex;
    gap: 6px;
    z-index: 10;
  }

  .control-btn {
    padding: 0.4rem 0.6rem;
    background: white;
    border: 1px solid #ddd;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    transition: all 0.2s;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    min-width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .control-btn:hover {
    background: #f0f0f0;
    box-shadow: 0 2px 6px rgba(0,0,0,0.15);
  }

  .control-btn.active {
    background: #667eea;
    color: white;
    border-color: #667eea;
  }

  .node-popup {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(4px);
  }

  .node-popup.active { display: flex; }

  .popup-content {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    max-width: 500px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 10px 40px rgba(0,0,0,0.3);
    position: relative;
    animation: popupSlide 0.3s ease;
  }

  @keyframes popupSlide {
    from { opacity: 0; transform: translateY(-30px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .popup-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    font-size: 2rem;
    cursor: pointer;
    color: #999;
    line-height: 1;
    transition: color 0.2s;
  }

  .popup-close:hover { color: #333; }

  #popupTitle {
    margin: 0 0 1rem 0;
    color: #2B7CE9;
    font-size: 1.5rem;
  }

  #popupDefinition {
    margin-bottom: 1.5rem;
    color: #555;
    line-height: 1.6;
  }

  .popup-actions { display: flex; gap: 10px; }

  .popup-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.2s;
  }

  .popup-btn.primary {
    background: #2B7CE9;
    color: white;
  }

  .popup-btn.primary:hover {
    background: #1a5fc7;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(43, 124, 233, 0.3);
  }
</style>